version: '3.9'

#2.1 Azure Monitor
#Azure Monitor automatycznie gromadzi platformowe metryki (CPU, pamięć, dysk, sieć, instancje, autoscaling) bez dodatkowych opłat za ich zbieranie i wizualizację w Metrics Explorer
#Microsoft Learn. Niektóre metryki gościa (guest metrics) wymagają zainstalowania agenta, ale standardowe platformowe są dostępne „od ręki”
#Microsoft Learn. Ceny za logi i dodatkowe zapytania analizujące (Log Analytics) zaczynają się od $0.10 GB dla eksportu i $0.005 GB dla zapytań, a za metryki w Metrics Explorer płaci się zgodnie z zużyciem (pay-as-you-go)
#Azure.

#2.2 Google Cloud Monitoring
#Cloud Monitoring (dawniej Stackdriver) oferuje bibliotekę wbudowanych dashboardów i widżetów do szybkiego wyświetlania metryk CPU, pamięci, ruchu sieciowego i autoscalingu bez konieczności instalacji eksportera
#Google Cloud. Darmowy próg obejmuje 1 mln zwróconych szeregów czasowych miesięcznie, a kolejne kosztują $0.50 za milion zwróconych serii, co przekłada się na około $3.82 miesięcznie dla typowego zestawu 10 metryk śledzonych co 5 minut przez 30 dni
#Google Cloud.

# TODO przygotować monitoring na google cloud i azure (CPU, RAM, sieć, autoscaling)
# TODO eksporter metryk bazy danych, czy warto?
# TODO skonfigurować pobieranie danych z azure i google cloud w prometheus ( wkażdym z dashboardów musi być jasno określony dostawca w dropdownie)
# TODO uruchomić całośc na google cloud
# TODO uruchomić całośc na azure

services:
  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    command:
      - "--config.file=/etc/prometheus/prometheus.yml"
      - "--web.enable-remote-write-receiver"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    ports:
      - "9090:9090"

  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    ports:
      - "3000:3000"
    volumes:
      - ./provisioning:/etc/grafana/provisioning
      - grafana_data:/var/lib/grafana
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=Test123!
      - GRAFANA_TOKEN=${GRAFANA_TOKEN}
      - K6_TEST_START=${TEST_START}
      - GRAFANA_URL=http://grafana:3000
      - RUN_ID=${RUN_ID:-$(date +%s)}
    depends_on:
      - prometheus

  postgres_exporter:
    image: wrouesnel/postgres_exporter
    container_name: postgres_exporter
    environment:
      DATA_SOURCE_NAME: "postgresql://postgres:postgres@host.docker.internal:5432/postgres?sslmode=disable"
    ports:
      - "9187:9187"

#  log_poller:
#    build:
#      context: ./logs/logs-poller
#      dockerfile: Dockerfile
#    ports:
#      - "8002:8002"
#    container_name: log_poller
#    environment:
#      - LOG_ENDPOINT=http://host.docker.internal:8000/logs/
#    volumes:
#      - logs:/var/log
#    healthcheck:
#      test: ["CMD-SHELL", "curl -f http://localhost:8002/health || exit 1"]
#      interval: 15s
#      timeout: 5s
#      retries: 3
#
#  fluentbit:
#    image: fluent/fluent-bit:latest
#    container_name: fluentbit
#    volumes:
#      - ./logs/fluent-bit/fluent-bit.conf:/fluent-bit/etc/fluent-bit.conf:ro
#      - ./logs/fluent-bit/parsers.conf:/fluent-bit/etc/parsers.conf:ro
#      - logs:/var/log
#    depends_on:
#      - log_poller
#
#  loki:
#    image: grafana/loki:2.8.2
#    container_name: loki
#    ports:
#      - "3100:3100"
#    volumes:
#      - loki_data:/loki
#    depends_on:
#      - fluentbit

  k6-base: &common
    build:
      context: ./load-tests
      dockerfile: Dockerfile
    depends_on:
      - prometheus
      - grafana
    deploy:
      resources:
        limits:
          cpus: '4.0'
          memory: 4G
    environment:
      - K6_PROMETHEUS_RW_SERVER_URL=http://host.docker.internal:9090/api/v1/write
      - K6_PROMETHEUS_RW_TREND_STATS=p(95),p(99),count,min,max,avg,sum
      - GRAFANA_URL=host.docker.internal:3000
      - GRAFANA_TOKEN=${GRAFANA_TOKEN}
    volumes:
      - ./load-tests/tests/:/tests
    profiles: ["loadtests"]

  k6-gcp:
    extends: { service: k6-base }
    environment:
      - BASE_URL=https://service.a.run.app
      - K6_PROMETHEUS_LABELS="cloud=gcp,run=$(date +%s)"

  k6-azure:
    extends: { service: k6-base }
    environment:
      - BASE_URL=https://service.azurewebsites.net
      - K6_PROMETHEUS_LABELS="cloud=azure,run=$(date +%s)"

  k6-local:
    extends: { service: k6-base }
    environment:
      - BASE_URL=http://host.docker.internal:8000
      - K6_PROMETHEUS_LABELS="cloud=local,run=$(date +%s)"

volumes:
  grafana_data: {}
  prometheus_data: {}
  loki_data: {}
  logs: {}