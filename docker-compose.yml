version: "3.9"
#TODO DODAĆ ADNOTACJE DO METRYK KONTENERA? NIE LEPIEJ WYPISYWAĆ PRZEDZIAŁY CZASOWE I NA PODSTAWIE TEGO FILTROWAĆ?
#TODO uruchomić testy i zweryfikować jak zbieraja się dane oraz czy widać na każdym rozpoczęcie i zakończenie testów
#TODO przygotować monitoring na azure (CPU, RAM, sieć, autoscaling) wdrożyć identyczne wykresy dla azure

services:
  grafana:
    image: grafana/grafana:latest
    restart: unless-stopped
    ports:
      - "3000:3000"
    volumes:
      - ./provisioning:/etc/grafana/provisioning
      - grafana_data:/var/lib/grafana
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=Test123!
      - GRAFANA_TOKEN=${GRAFANA_TOKEN}
      - K6_TEST_START=${TEST_START}
      - GRAFANA_URL=http://grafana:3000
      - RUN_ID=${RUN_ID:-$(date +%s)}
    depends_on:
      - prometheus

  prometheus:
    image: prom/prometheus:latest
    restart: unless-stopped
    env_file:
      - .env
    command:
      - "--config.file=/etc/prometheus/prometheus.yml"
      - "--web.enable-remote-write-receiver"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    ports:
      - "9090:9090"

  #  gcp-sql-proxy:
  #    image: gcr.io/cloud-sql-connectors/cloud-sql-proxy:2.15.2-alpine
  #    container_name: gcp-sql-proxy
  #    command:
  #      - "--debug"
  #      - "--address=0.0.0.0"
  #      - "--port=5432"
  #      - "--credentials-file=/secrets/gcp- .json"
  #      - "${GCP_PROJECT_ID}:${GCP_REGION}:${GCP_PROJECT_DB_NAME}"
  #      - "--prometheus"
  #    volumes:
  #      - ./terraform_deploys/gcp/gcp-credentials.json:/secrets/gcp-credentials.json:ro
  #    ports:
  #      - "5432:5432"
  #      - "9104:9104"

  #  postgres_exporter-proxy:
  #    image: wrouesnel/postgres_exporter
  #    depends_on:
  #      - gcp-sql-proxy
  #    env_file:
  #      - .env
  #    environment:
  #      DATA_SOURCE_NAME: "postgresql://${GOOGLE_POSTGRESQL_USERNAME}:${GOOGLE_POSTGRESQL_PASSWORD}@gcp-sql-proxy:5432/${GOOGLE_POSTGRESQL_NAME}?sslmode=disable"
  #    ports:
  #      - "9187:9187"
  #TODO zweryfikować paramety pozyskiwane przez oba eksportery np interval co ile 1m, jakie metryki
  stackdriver-exporter-gcp:
    image: quay.io/prometheuscommunity/stackdriver-exporter:latest
    restart: unless-stopped
    # TODO ustalić konktetne zmienne nie cały plik
    env_file:
      - .env
    environment:
      - GOOGLE_APPLICATION_CREDENTIALS=/etc/stackdriver/gcp-credentials.json
    command:
      - --google.project-id=${GCP_PROJECT_ID}
      - --monitoring.metrics-prefixes=run.googleapis.com/container/cpu/usage
      - --monitoring.metrics-prefixes=run.googleapis.com/container/cpu/utilizations
      - --monitoring.metrics-prefixes=run.googleapis.com/container/memory/usage
      - --monitoring.metrics-prefixes=run.googleapis.com/container/memory/utilizations
      - --monitoring.metrics-prefixes=run.googleapis.com/container/network/received_bytes_count
      - --monitoring.metrics-prefixes=run.googleapis.com/container/network/sent_bytes_count
      - --monitoring.metrics-prefixes=run.googleapis.com/container/instance_count
      - --monitoring.metrics-prefixes=run.googleapis.com/container/startup_latencies
      - --monitoring.metrics-interval=1m
      - --monitoring.metrics-offset=1m
      - --web.listen-address=:8080
    volumes:
      - ./terraform_deploys/gcp/gcp-credentials.json:/etc/stackdriver/gcp-credentials.json:ro
    ports:
      - "8080:8080"
    depends_on:
      - prometheus
      - grafana

  azure-metrics-exporter:
    image: webdevops/azure-metrics-exporter:latest
    restart: unless-stopped
    ports:
      - "8081:8080"
    environment:
      - AZURE_TENANT_ID=${AZURE_TENANT_ID}
      - AZURE_SUBSCRIPTION_ID=${AZURE_SUBSCRIPTION_ID}
      - AZURE_CLIENT_ID=${AZURE_CLIENT_ID}
      - AZURE_CLIENT_SECRET=${AZURE_CLIENT_SECRET}
      - LOG_DEVEL=true
    depends_on:
      - prometheus
      - grafana

  k6-base: &common
    build:
      context: ./load-tests
      dockerfile: Dockerfile
    depends_on:
      - prometheus
      - grafana
    deploy:
      resources:
        limits:
          cpus: "4.0"
          memory: 4G
    environment:
      - K6_PROMETHEUS_RW_SERVER_URL=http://host.docker.internal:9090/api/v1/write
      - K6_PROMETHEUS_RW_TREND_STATS=p(95),p(99),count,min,max,avg,sum
      - GRAFANA_URL=host.docker.internal:3000
      - GRAFANA_TOKEN=${GRAFANA_TOKEN}
    volumes:
      - ./load-tests/tests/:/tests
    profiles: ["loadtests"]

#  k6-gcp-low:
#    extends: { service: k6-base }
#    environment:
#      - BASE_URL=---
#      - K6_PROMETHEUS_LABELS="cloud=gcp,run=$(date +%s)"
#
#  k6-gcp-medium:
#    extends: { service: k6-base }
#    environment:
#      - BASE_URL=---
#      - K6_PROMETHEUS_LABELS="cloud=azure,run=$(date +%s)"
#
#  k6-gcp-high:
#    extends: { service: k6-base }
#    environment:
#      - BASE_URL=---
#      - K6_PROMETHEUS_LABELS="cloud=gcp,run=$(date +%s)"
#
#  k6-azure-low:
#    extends: { service: k6-base }
#    environment:
#      - BASE_URL=---
#      - K6_PROMETHEUS_LABELS="cloud=azure,run=$(date +%s)"

  k6-azure-medium:
    extends: { service: k6-base }
    environment:
      - BASE_URL=https://medium-xv0v9.graybush-b884251d.polandcentral.azurecontainerapps.io/
      - K6_PROMETHEUS_LABELS="cloud=azure,run=$(date +%s)"

#  k6-azure-high:
#    extends: { service: k6-base }
#    environment:
#      - BASE_URL=---
#      - K6_PROMETHEUS_LABELS="cloud=azure,run=$(date +%s)"

volumes:
  grafana_data: {}
  prometheus_data: {}
